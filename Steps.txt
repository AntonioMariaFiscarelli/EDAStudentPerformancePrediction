Create git repository called "EDAStudentPerformancePrediction"
Create local folder called "EDAStudentPerformancePrediction"
Open Anaconda Prompt
 cd to "C:\Users\AntonioFisk\Desktop\New PC\Personal Projects\EDAStudentPerformancePrediction"
 code . (will open visual studio code in the folder)
Terminal>new Terminal
 conda create -p venv python==3.8 -y
 conda activate venv/
 conda install -c anaconda git
 install git for Windows
 #echo "# EDAStudentPerformancePrediction #" >> README.md
 git init (initializes git repository)
 git add README.md
 git config --global user.email "antoniofisk90@gmail.com" (adds email and username of the github repo that it will synch to)
 git config --global user.name "AntonioMariaFiscarelli"
 git commit -m "first commit"
 git status (prints status of the commint)
 git branch -M main
 git remote add origin https://github.com/AntonioMariaFiscarelli/EDAStudentPerformancePrediction.git (synchs to the github repo)
 git remote -v (prints the github repo it is synched to)
 git push -u origin main
Go to github repo, add file called ".gitignore", select python language, commit changes
 git pull (in order to pull thegitignore file)

create files setup.py and requirements.txt
add "-e ." at the end of requirements.txt. This will allow to use src as a package (to do "importo src.filename")
create folder "src" and create file "__init__.py" in it
populate the files setup.py and requirements.txt
 pip install -r requirements.txt
git add .
git commit -m "setup"
git push -u origin main

PT.2
Create folder "components" with files __init__.py, data_ingestion.py, data_transformazion.py and model_trainer.py
Create folder "pipeline" with files __init__.py, train_pipeline.py, predict_pipeline.py and model_trainer.py
Scripts in the pipeline folder will call the scrips in the components folder
Create files logger.py, exception.py and utils.py, populate them

PT 3.
create folder notebook and notebook/data
run notebooks, select python interpreter/venv when asked 
install ipykernel as asked
conda install -p "c:\Users\AntonioFisk\Desktop\New PC\Personal Projects\EDAStudentPerformancePrediction\venv ipykernel --update-deps --force-reinstall'" #will force ipykernerl reinstallation
!pip install -r ../requirements.txt #run it on the notebook (even though requirements were already installed from the terminal)


P.8 flask app
Create app.py
Create templates folder
	Create index.html
	Create home.html
Write predict_pipeline.py file

PT.9 CD on AWS
on VisualCode: create ElasticBeanStalk configuration file (.ebextentions/python.config)
create a new file application.py (an exact copy of app.py)
on AWS: 
create instance, and set up environment.
Remember to creane IAM profile and new EC2-instance or create a new one, otherwise the environment won't launch:
https://www.reddit.com/r/aws/comments/13f2jdg/error_the_instance_profile/
https://stackoverflow.com/questions/76626720/the-instance-profile-associated-with-the-environment-does-not-exist
https://stackoverflow.com/questions/30790666/error-with-not-existing-instance-profile-while-trying-to-get-a-django-project-ru
create codepipeline (for Continous Delivery). as source, select GitHub. no build provider. deploy provider is AWS Elastic Beanstalk
Every time there is a change in the progect (a new commit) AWS Beanstalk will release and show the change


PT.11 CDCI on AWS
Watch Docker video first: Complete Dockers for Data Science Tutorial  in One Shot.
Install Docker Deskto for Windows and login.
docker images #check existing docker images
With Docker you will be able to create containers regardless the O.S. running on the server
Add Docker file to the VC project
docker build -t edastudentperformanceprediction .
2. Create Github workflow folder
Main YAML file will contain 3 jobs: Integration, build and push ecr image, continous deployment
Where do I get this file. Github -> Actions -> Workflow -> new workflow -> Deploy to Amazon ECS
The docker image will have to be on AWS, in the ECR repository (Elastic Container Repository, a AWS repository for docker images)
Create IAM (Identity access Management)
3. IAM
Go to AWS -> IAM -> New User. Attach policies manually (AmazonEC2ContainerRegistryFullAccess, AmazonEC2FullAccess)
Go to the user -> Security Credentials -> Create access key -> select Command Line Interface (CLI) -> no tag -> Create Access Key
Access key Id:AKIAYS2NUOPSUK3Y57A3
Secret access Key: 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
4. CREATE ECR (Elastic Container Repository)
Search ECR -> Create new repository
Go to the ECR repo list, copy URL and save it.
590183953381.dkr.ecr.eu-north-1.amazonaws.com/studentsperformance
5. CREATE EC2 (cloud server instance) (it will cost some money, so delete it after)
Search EC2 -> launch instance
- Quick Start (select Ubuntu)
- Instance type (select T2.medium)
- Key pair login (RSA type)
- Allow SSh/HTTPS/HTTP traffic
Go to EC2 Instance -> Security -> Security Group -> Edit inbound rules -> Add custom TCP (porto 8080)
6. Connect EC2 instance to ECR
Go to EC2 Instance -> Connect (it will open a consolle)
sudo apt-get update -y
curl -fsSL https://get.docker.com -o get-docker.sh # (min 24:00 on youtube) isntall all required packages wrt docker
sudo sh get-docker.sh
sudo usermod -aG docker ubuntu # so that I don't need to use "sudo" every time
newgrp docker
6. Configure EC2 self-host
Go to Github repository -> Settings -> Actions -> Runner
Take the command lines and execute them in the EC2 Instance consolle
Enter name of the runne group: blank
Enter name of the runner: self-hosted
Enter lavles: none
Enter ork folder: blank
./run/sh
Listening for jobs... any push to the GitHub will be deployed on the EC2
Go to Github repo -> Secrets and Variables -> Actions -> Add security key -> New repository secret
Add the ECR AWS_ACCESS_KEY_ID (see step 4)
Add the ECR AWS_SECRET_ACCESS_KEY (see step 4)
Add AWS_REGION (check region on AWS)
AWS_ECR_LOGIN_URI (first part of ECR url: 590183953381.dkr.ecr.eu-north-1.amazonaws.com)
ECR_REPOSITORY_NAME (second part of ECR url: studentsperformance)
7. Remove
ECR/EC2 Instance -> remove
Github repo -> Actions -> Runner -> remove




































